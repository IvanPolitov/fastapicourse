Для этой задачи программирования вам необходимо реализовать управление доступом на основе ролей в приложении FastAPI. Предположим, что аутентификация на основе JWT уже реализована, и пользователям назначаются роли в процессе регистрации.
Требования:
1. Создайте как минимум три роли: "администратор", "пользователь" и "гость" (admin, user, guest). Определите соответствующие разрешения для каждой роли. Например, "администратор" может иметь полные разрешения CRUD, в то время как "пользователь" может читать и обновлять ресурсы, а "гость" имеет ограниченный доступ только для чтения.
2. Реализуйте авторизацию на основе ролей для ваших конечных точек FastAPI. Используйте внедрение зависимостей или авторизацию на основе декоратора, чтобы проверить роль пользователя, прежде чем разрешить доступ к определенным конечным точкам.
3. Создайте конечную точку FastAPI `/protected_resource`, для которой требуется аутентификация. Убедитесь, что только пользователи с соответствующей ролью (например, "администратор" или "пользователь") могут получить доступ к этой конечной точке.
4. Для каждой роли создайте определенные конечные точки API, которые демонстрируют разрешения этой роли. Например, роль "администратор" может иметь конечную точку для создания ресурса, в то время как роль "пользователь" может только читать и обновлять существующие ресурсы.
5. Протестируйте свою реализацию RBAC, отправляя запросы к различным конечным точкам с разными ролями пользователей. Убедитесь, что доступ надлежащим образом ограничен в зависимости от роли пользователя.
Примечание: Для этой задачи вы можете использовать словари Python или простое хранилище данных в памяти для хранения ролей и связанных с ними разрешений. В реальном сценарии вы обычно интегрируете RBAC с базой данных вашего приложения.

